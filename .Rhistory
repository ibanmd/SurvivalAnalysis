library(survival)
library(KMsurv)
library(knitr)
library(ggfortify)
table_maker <- function(survival_object){
H <- cumsum(summary(survival_object)$n.event/summary(survival_object)$n.risk)
se <- sqrt(cumsum(summary(survival_object)$n.event/(summary(survival_object)$n.risk)^2))
all_table <- data.frame(summary(survival_object)[c(2,3,4,6,8)])
all_table$Hhat <- H
all_table$hsigma <- se
all_table$slope <- rep(0, length(H))
for(i in 1:(length(H)-1)){
all_table$slope[i] <- 30*(H[i+1]-H[i])/(all_table[i+1, 1] - all_table[i,1])
}
return(all_table)
}
est_variance <- function(surv, t2){
table <- summary(surv)
surv_function <- stepfun(summary(surv)$time, c(1, (summary(surv))$surv))
sum <- 0
for(i in (1:length(table$time))){
sum = sum + (((integrate(surv_function, table[[2]][i], t2, subdivisions = 10000))$val)^2 * table[[4]][i] / (table[[3]])[i] / ((table[[3]])[i]-(table[[4]])[i]))
}
return(sqrt(sum))
}
table_4_7 <- function(table){
s_hat <- table[4]
se_hat <- table[5]
p <- 0.5
linear <- (s_hat - (1 - p))/(se_hat)
log <- ((log(-log(s_hat))-log(-log(1-p)))*s_hat*log(s_hat))/(se_hat)
arcsine <- (2*(asin(sqrt(s_hat))-asin(sqrt(1-p)))*sqrt((s_hat)*(1 - s_hat)))/(se_hat)
result <- round(data.frame(time = table$time,
surv = table$surv,
std.err = table[5],
linear = linear,
log = log,
arcsine = arcsine), 3)
names(result) <- c("time", "surv", "std.err", "linear", "log", "arcsine")
return(result)
}
source(file = "conf_bands.R")
print_EP_bands <- function(band_output){
output <- data.frame(time = band_output$time,
shat = band_output$surv,
sqV = sqrt(band_output$sigma2 * (band_output$surv)^2),
sigma2 = band_output$sigma2,
lin_low = band_output$linSL,
lin_hi = band_output$linSU,
log_lo = band_output$logSL,
log_hi = band_output$logSU,
arc_low = band_output$arcSL,
arc_hi = band_output$arcSU)
return(output)
}
getwd()
setwd("/Users/Mario/Desktop/SurvivalAnalysis/")
source(file = "conf_bands.R")
print_EP_bands <- function(band_output){
output <- data.frame(time = band_output$time,
shat = band_output$surv,
sqV = sqrt(band_output$sigma2 * (band_output$surv)^2),
sigma2 = band_output$sigma2,
lin_low = band_output$linSL,
lin_hi = band_output$linSU,
log_lo = band_output$logSL,
log_hi = band_output$logSU,
arc_low = band_output$arcSL,
arc_hi = band_output$arcSU)
return(output)
}
part_f <- function(shat, sigmas){
theta <- exp((1.96 * sigmas)/(log(shat)))
logleft <- shat^(1/theta)
logright <- shat^theta
arcleft <- sin(max(0, asin(sqrt(shat)) - 0.5*1.96*sigmas*sqrt((shat)/(1-shat))))^2
arcright <- sin(min(pi/2, asin(sqrt(shat)) + 0.5*1.96*sigmas*sqrt((shat)/(1-shat))))^2
return(c(logleft, logright, arcleft, arcright))
}
data("tongue")
head(tongue)
data(tongue)
tongue$tumor[tongue$type==1] <- "Aneuploid"
tongue$tumor[tongue$type==2] <- "Diploid"
KM_ane <- survfit(Surv(time = time, event = delta) ~ 1, data = tongue[tongue$type==1,])
KM_dip <- survfit(Surv(time = time, event = delta) ~ 1, data = tongue[tongue$type==2,])
tongue$tumor <- as.factor(tongue$tumor)
ane <- tongue[tongue$tumor == "Aneuploid", ]
dip <- tongue[tongue$tumor == "Diploid", ]
dip
kable(round(print_EP_bands(EP.bands(otime = dip$time, censor = dip$delta, 100, 400, 2.5949)), 3))
kable(round(print_EP_bands(EP.bands(otime = dip$time, censor = dip$delta, 100, 400, 2.5949)), 3)[,c(1:4)])
kable(round(print_EP_bands(EP.bands(otime = dip$time, censor = dip$delta, 10, 400, 2.5949)), 3)[,c(1:4)])
sqrt(0.025)
kable(round(print_EP_bands(EP.bands(otime = ane$time, censor = ane$delta, 10, 400, 2.5949)), 3)[,c(1:4)])
sqrt(0.005)
head(dip)
aLaU(dip$time, dip$delta, 13, 104)
kable(round(print_EP_bands(EP.bands(otime = dip$time, censor = dip$delta, 13, 104, 2.7831)), 3))
aLaU(ane$time, ane$delta, 13, 104)
kable(round(print_EP_bands(EP.bands(otime = ane$time, censor = ane$delta, 13, 104, 2.8784)), 3))
aLaU(dip$time, dip$delta, 13, 104)
aLaU(dip$time, dip$delta, 0, 104)
aLaU(dip$time, dip$delta, 0.1, 104)
dip
aLaU(dip$time, dip$delta, 1, 104)
kable(round(print_HW_bands(HW.bands(dip$time, dip$delta, 0, 104, 1.3525)), 3))
print_HW_bands <- function(band_output){
output <- data.frame(time = band_output$time,
shat = band_output$PLE,
sigma2 = band_output$sigma2,
lin_low = band_output$linSL,
lin_hi = band_output$linSU,
log_lo = band_output$logSL,
log_hi = band_output$logSU,
arc_low = band_output$arcSL,
arc_hi = band_output$arcSU)
return(output)
}
kable(round(print_HW_bands(HW.bands(dip$time, dip$delta, 0, 104, 1.3525)), 3))
kable(round(print_HW_bands(HW.bands(dip$time, dip$delta, 1, 104, 1.3525)), 3))
aLaU(ane$time, ane$delta, 1, 104)
kable(round(print_HW_bands(HW.bands(ane$time, ane$delta, 1, 104, 1.3434)), 3))
